" ================================================================================================
" 🐧🐧🐧 Basic settings 🐧🐧🐧
syntax on
set hlsearch
set scrolloff=10
set ignorecase "--在搜索时忽略大小写
set incsearch
set sneak
set clipboard=unnamed
set ideajoin
set ideamarks
"--将<leader>设置为 空格 键
let mapleader = " "

" ================================================================================================
" 👻👻👻 IdeaVim plugins 👻👻👻
" ================================================================================================
" --- Enable IdeaVim plugins https://jb.gg/ideavim-plugins
Plug machakann/vim-highlightedyank'
Plug 'tpope/vim-commentary'
Plug 'vim-scripts/argtextobj.vim'
Plug 'tpope/vim-surround'
Plug '<plugin-github-reference>'
Plug 'easymotion/vim-easymotion'
Plug 'preservim/nerdtree'
set which-key
set notimeout

" ================================================================================================
" 🌍🌍🌍 No Leader Keymaps 🌍🌍🌍
" ================================================================================================
"debug神器
"nmap <C-j> :action StepOver<CR>
"nmap <C-k> :action Resume<CR>
"nmap <C-h> :action StepOut<CR>
"nmap <C-l> :action ForceStepInto<CR>
nmap <Leader>u  <C-u>
nmap <Leader>d  <C-d>
"添加注释
nmap ;; :action CommentByLineComment<CR>
"全局分类替换
nmap <A-R> :action ReplaceInPath<CR>
map <A-[> <Action>(Back)
nmap <A-]> :action Forward<CR>
nmap <TAB> >>
nmap <C-J> <Action>(MoveLineDown)
nmap <C-K> <Action>(MoveLineUp)
nmap <A-J> <Action>(MoveStatementDown)
nmap <A-K> <Action>(MoveStatementUp)
vmap <C-J> <Action>(MoveLineDown)
vmap <C-K> <Action>(MoveLineUp)
vmap <A-J> <Action>(MoveStatementDown)
vmap <A-K> <Action>(MoveStatementUp)

nmap ga :action GotoAction<CR>
nmap gc :action GotoClass<CR>
nmap gd :action GotoDeclaration<CR>
nmap gf :action GotoFile<CR>
nmap gi :action GotoImplementation<CR>
nmap gs :action GotoSymbol<CR>
"水平分割"
nmap sv :vsplit<CR>
"垂直分割"
nmap sg :split<CR>

" Quit visual mode
vmap v <Esc>
" Yank to the end of line
nmap Y y$
imap jk <Esc>
" Redo
nmap U <C-r>
" --格式化（规范化）文本，即对选定的文本进行换行或重排，适应指定的文本宽度。
map Q gq

"跳转到下一个错误或警告
nmap ge <action>(GotoNextError)
"在源代码和测试代码之间快速切换
nmap gt <action>(GotoTest)
"将光标移动到上一个方法的声明处
nmap gm <action>(MethodUp)

" bookmark 切换书签
nmap ma <action>(ToggleBookmark)
"切换标签页
nmap H <action>(NextTab)
nmap L <action>(PreviousTab)

"将Ctrl + s 映射为保存文档(也可以在VIM设置里将此快捷键设置为IDEA的快捷键)
nmap <C-S> <action>(SaveAll)
imap <C-S> <Esc><action>(SaveAll)

"按下 <C-n> 将打开 NERDTree 文件资源管理器
nmap <C-n> :NERDTree<CR>
"按下 <C-t> 将切换 NERDTree 文件资源管理器的显示状态，即打开或关闭 NERDTree
nmap <C-t> :NERDTreeToggle<CR>
"按下 <C-f> 将在 NERDTree 文件资源管理器中定位当前编辑文件所在的节点，并使其可见
nmap <C-f> :NERDTreeFind<CR>
nmap fu :action FindUsages<CR>

" ================================================================================================
" ⭐️⭐️⭐️ Leader Keymaps ⭐️⭐️⭐️ =====================================
" ================================================================================================

nmap <Leader>re :action RenameElement<CR>
nmap <Leader>rf :action RenameFile<CR>
nmap <Space>ga :action GotoAction<CR>
nmap <leader>ft <action>(FindInPath)

"重新格式化代码，使其符合预定义的代码样式和规范 \| 优化导入语句，删除未使用的导入，并将导入语句按字母顺序进行排列
nmap <leader>fm <action>(ReformatCode) \| <action>(OptimizeImports)

"========== c ==========
let g:WhichKeyDesc_CodeAndClose = "<leader>c CodeAndClose"
"关闭所有标签页
nmap <leader>ca <action>(CloseAllEditors)
"关闭当前标签页
nmap <leader>ce :action CloseEditor<CR>
"代码自动补全
nmap <leader>cc <action>(CodeCompletion)

"========== d ==========
"打断点/解除断点
nmap <leader>p <Action>(ToggleLineBreakpoint);
"调试
nmap <leader>b <Action>(Debug)

"========== e ==========
"打断点/解除断点
" extract method/function 将选中的代码片段提取为一个独立的方法(Ctrl + Alt + M)
vmap <leader>em <action>(ExtractMethod)
" extract constant （引入常量）的重构操作:将选中的代码片段抽取为一个常量，并自动替换选中的代码片段为新的常量引用(Ctrl + Alt + C)
vmap <leader>ec <action>(IntroduceConstant)
" extract field （引入字段）的重构操作:将选中的代码片段转化为一个新的字段，并自动将选中的代码片段替换为对该字段的引用(Ctrl + Alt + F)
vmap <leader>ef <action>(IntroduceField)
" extract variable （引入变量）的重构操作:将选中的代码片段抽取为一个新的变量，并自动替换选中的代码片段为新的变量引用(Ctrl + Alt + V)
vmap <leader>ev <action>(IntroduceVariable)

"========== g ==========
let g:WhichKeyDesc_GitOrGenerate = "<leader>g GitOrGenerate"

"执行版本控制（VCS）的回滚操作，将修改的代码还原到之前的版本
nmap <leader>gr :action Vcs.RollbackChangedLines<CR>
"生成构造器
nmap <leader>gc :action GenerateConstructor<CR>
"生成getter
nmap <leader>gg :action GenerateGetter<CR>
"生成setter
nmap <leader>gs :action GenerateSetter<CR>
"生成setter和getter
nmap <leader>ga <action>(GenerateGetterAndSetter)
"生成 equals() 和 hashcode() 的重写方法
nmap <leader>ge <action>(GenerateEquals)
"生成toString
nmap <leader>gt <action>(Actions.ActionsPlugin.GenerateToString)

"diff 显示文件的版本控制历史(git)
nmap <leader>gd <action>(Vcs.ShowTabbedFileHistory)

"========== j ==========
"普通模式下在行尾一个分号，然后进入插入模式并在当前行的下方新建一行
nmap <leader>j A;<ESC>o

"========== n ==========
"取消搜索高亮显示(No light)
nmap <leader>nl :nohlsearch<CR>
"在当前目录新建文件夹
nmap <leader>nd <action>(NewDir)
"在当前目录新建类
nmap <leader>nc <action>(NewClass)

"========== r ==========
let g:WhichKeyDesc_RunOrRe = "<leader>r RunOrRe"

"运行当前编辑器中的文件或类
nmap <leader>ru :action RunClass<CR>
"重新运行最近一次运行的程序或测试
nmap <leader>rr <action>(Rerun)
"重新运行最近一次运行的测试（Unit Tests）
nmap <leader>rt <action>(RerunTests)

"========== s ==========
let g:WhichKeyDesc_Show = "<leader>s Show"

"显示当前打开文件的文件结构弹出窗口，其中包含文件中的类、方法、字段等结构(Alt + 7)
nmap <leader>ss <action>(FileStructurePopup)
"显示书签（Bookmarks）工具窗口，其中包含当前文件中设置的书签列表(Ctrl + F11)
nmap <leader>sb <action>(ShowBookmarks)
"用于显示方法或函数的参数信息(Ctrl + p)

"关闭到只剩当前tab栏
nmap <leader>sc :action CloseAllEditorsButActive<CR>

"========== y ==========
"将 "+ 简化为 <leader>
let g:WhichKeyDesc_CopyClipboard = "<leader>y CopyClipboard"
vmap <leader>y "+y
"将 "+ 简化为 <leader>
let g:WhichKeyDesc_CopyClipboard= "<leader>y CopyClipboard"
nmap <leader>y "+yy

"========== z ==========
let g:WhichKeyDesc_Zip = "<leader>z Zip"

"展开所有代码折叠区域(Ctrl + Shift + 加号键)
nmap <leader>zo <action>(ExpandAllRegions)
"折叠所有代码折叠区域(Ctrl + Shift + 减号键)
nmap <leader>zc <action>(CollapseAllRegions)

nmap <Space>ff :action ShowFilePath<CR>
